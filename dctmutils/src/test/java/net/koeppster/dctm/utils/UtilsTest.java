/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package net.koeppster.dctm.utils;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import net.koeppster.NoExitSecurityManager;

import static org.junit.jupiter.api.Assertions.*;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.lang.SecurityManager;
import java.util.Properties;

class UtilsTest {

    static Properties props = new Properties();

    @BeforeAll
    static void loadProps() throws FileNotFoundException, IOException {
        InputStream propStream = UtilsTest.class.getClassLoader().getResourceAsStream("test.properties");
        props.load(propStream);
    }
    
    @Test
    void checkPingBroker() {
        assertTrue(
            Utils.pingDocbroker(new DocbrokerSpec(
                                props.getProperty("docbroker.host"),
                                props.getProperty("docbroker.good.port"))
                                ),
    "Operating Docbroker Reported Up"
        );
        assertFalse(
            Utils.pingDocbroker(new DocbrokerSpec(props.getProperty("docbroker.host"),
                                props.getProperty("docbroker.bad.port"))),
    "Check via invalid port reported down"
        );
    }

    @Test
    void checkPingDocbase() {
        assertTrue(
            Utils.pingDocbase(new DocbrokerSpec(
                props.getProperty("docbroker.host"), 
                props.getProperty("docbroker.good.port")), 
                props.getProperty("docbase.good.name")
            ),
            "Operating docbase reported up"
        );
        assertFalse(
            Utils.pingDocbase(new DocbrokerSpec(
                props.getProperty("docbroker.host"),
                props.getProperty("docbroker.good.port")), 
                props.getProperty("docbase.bad.name")
            ),
            "Invalid docbase reported unavailable"
        );
    }

    @Test
    void checkCheckLogin() {
        assertTrue(
            Utils.checkLogin(new DocbrokerSpec(
                props.getProperty("docbroker.host"), 
                props.getProperty("docbroker.good.port")), 
                props.getProperty("docbase.good.name"),
                props.getProperty("user.name"), 
                props.getProperty("user.good.password")),
            "Login Attempt reported success"
        );
        assertFalse(Utils.checkLogin(new DocbrokerSpec(
            props.getProperty("docbroker.host"), 
            props.getProperty("docbroker.good.port")), 
            props.getProperty("docbase.good.name"),
            props.getProperty("user.name"), 
            props.getProperty("user.bad.password")),
    "Login Attempt Reported failed"
        );
    }

    @Test
    void checkMainNoCmd() {
        SecurityManager origManager = System.getSecurityManager();
        NoExitSecurityManager newManager = new NoExitSecurityManager();
        System.setSecurityManager(newManager);
        try {
            assertThrows(NoExitSecurityManager.ExitException.class, () -> {
                Utils.main(new String[] {});
            },"Must return 1 when called with no args provided");
        }
        finally {
            System.setSecurityManager(origManager);
        }
    } 
    
    @Test
    void checkPingBrokerCmd() {
        SecurityManager origManager = System.getSecurityManager();
        NoExitSecurityManager newManager = new NoExitSecurityManager();
        System.setSecurityManager(newManager);
        try {
            NoExitSecurityManager.ExitException exitException = 
                assertThrows(NoExitSecurityManager.ExitException.class, () -> {
                    Utils.main(new String[] {"pingbroker"});
                }, "Must call System.exit(int)");
            assertEquals(1, exitException.status, "Must return 1 when called with no args");
            exitException = 
                assertThrows(NoExitSecurityManager.ExitException.class, () -> {
                    Utils.main(
                        new String[] {
                            "pingbroker", 
                            props.getProperty("docbroker.host"),
                            props.getProperty("docbroker.bad.port"), 
                        });
                    }, 
                    "Must call System.exit(int)");
            assertEquals(1, exitException.status, "Must return 1 when called with proper number of but invalid args");
            exitException = 
            assertThrows(NoExitSecurityManager.ExitException.class, () -> {
                Utils.main(
                    new String[] {
                        "pingbroker", 
                        props.getProperty("docbroker.host"),
                        props.getProperty("docbroker.good.port"), 
                    });
                }, 
                "Must call System.exit(int)");
        assertEquals(0, exitException.status, "Must return 0 when called with proper number of valid args");
        }
        finally {
            System.setSecurityManager(origManager);
        }
    } 

    @Test
    void checkPingDocbaseCmd() {
        SecurityManager origManager = System.getSecurityManager();
        NoExitSecurityManager newManager = new NoExitSecurityManager();
        System.setSecurityManager(newManager);
        try {
            NoExitSecurityManager.ExitException exitException = 
                assertThrows(NoExitSecurityManager.ExitException.class, () -> {
                    Utils.main(new String[] {"pingdocbase"});
                }, "Must call System.exit(int)");
            assertEquals(1, exitException.status, "Must return 1 when called with no args");
            exitException = 
                assertThrows(NoExitSecurityManager.ExitException.class, () -> {
                    Utils.main(
                        new String[] {
                            "pingdocbase", 
                            props.getProperty("docbroker.host"), 
                            props.getProperty("docbroker.good.port"), 
                            props.getProperty("docbase.bad.name")
                        });
                }, 
                "Must call System.exit(int)");
            assertEquals(1, exitException.status, "Must return 1 when called with proper number of but invalid args");
            exitException = 
                assertThrows(NoExitSecurityManager.ExitException.class, () -> {
                    Utils.main(
                        new String[] {
                            "pingdocbase", 
                            props.getProperty("docbroker.host"), 
                            props.getProperty("docbroker.good.port"), 
                            props.getProperty("docbase.good.name")
                        });
                }, 
                "Must call System.exit(int)");
            assertEquals(0, exitException.status, "Must return 0 when called with proper number of valid args");
        }
        finally {
            System.setSecurityManager(origManager);
        }
    } 

    @Test
    void checkPrintMapCmd() {
        SecurityManager origManager = System.getSecurityManager();
        NoExitSecurityManager newManager = new NoExitSecurityManager();
        System.setSecurityManager(newManager);
        try {
            NoExitSecurityManager.ExitException exitException = 
                assertThrows(NoExitSecurityManager.ExitException.class, () -> {
                    Utils.main(new String[] {"printmap"});
                }, "Must call System.exit(int)");
            assertEquals(1, exitException.status, "Must return 1 when called with no args");
            exitException = 
                assertThrows(NoExitSecurityManager.ExitException.class, () -> {
                    Utils.main(
                        new String[] {
                            "printmap", 
                            props.getProperty("docbroker.host"),
                            props.getProperty("docbroker.bad.port"), 
                        });
                }, 
                "Must call System.exit(int)");
            assertEquals(1, exitException.status, "Must return 1 when called with proper number of but invalid args");
            exitException = 
                assertThrows(NoExitSecurityManager.ExitException.class, () -> {
                    Utils.main(
                        new String[] {
                            "printmap", 
                            props.getProperty("docbroker.host"),
                            props.getProperty("docbroker.good.port"), 
                        });
                }, 
                "Must call System.exit(int)");
            assertEquals(0, exitException.status, "Must return 0 when called with proper number of valid args");
        }
        finally {
            System.setSecurityManager(origManager);
        }
    } 

}
