/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}


// sourceSets {
//    test {
//        resources {
//            srcDir 'C:/users/koepp/Documentum/config'
//        }
//    }
// }

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter:5.9.1'
   

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'net.sourceforge.argparse4j:argparse4j:0.9.0'
    implementation 'commons-io:commons-io:2.18.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0'
    implementation 'org.jasypt:jasypt:1.9.3'
    implementation 'net.java.dev.jna:jna-platform:5.16.0'
    implementation 'org.dizitart:nitrite-bom:4.3.0'
    implementation 'org.dizitart:nitrite:4.3.0'
    implementation 'org.dizitart:nitrite-jackson-mapper:4.3.0'
    implementation 'org.dizitart:nitrite-mvstore-adapter:4.3.0'
    implementation 'org.apache.commons:commons-csv:1.11.0'
    implementation 'me.tongfei:progressbar:0.9.0'
    implementation 'org.slf4j:slf4j-nop:2.0.16'
    implementation 'org.apache.commons:commons-io:1.3.2'
    implementation fileTree(dir:'C:/Program Files/Documentum/Shared', include: ['*.jar'])

}

application {
    // Define the main class for the application.
    mainClass = 'net.koeppster.dctm.utils.Utils'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
    workingDir = file("$projectDir/test")
}

tasks.named('run') {
    workingDir = file("$projectDir/test")
    classpath += files("$projectDir/test/etc")
    doFirst {
        standardOutput = System.out
        errorOutput = System.err
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11) // Specify your Java version
    }
}
